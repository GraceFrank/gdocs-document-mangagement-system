
path:
  /api/users/:
    get:
      tags: 
        - User
      description: returns All users when requested by admins
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
      responses:
        200:
          description: ok  successful
          schema:
            type: object
            properties:
              message: 
                type: string
                example: ok
              data: 
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type:
                    name:
                      type: object
                      properties:
                        first:
                          type: string
                          example: Grace
                        last:
                          type: string
                          example: frank
                    userName:
                      type: string
                      example: graceyfrank
                    email:
                      type: string
                      example: frankgracey@mail.com
                    password:
                      type: string
                    role:    
                      type: string
        401:
          description: only a logged in Admin user can access this route. so if a user is not logged in a status code of 401 is sent
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied no token provided'
        403:
          description: only an in Admin user can access this route. so if a logged in user who  is not an Admin tries to access this route, a status code of 403 is sent
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied no token provided'
    post:
      tags: 
        - User
      description: creates a new user
        - application/json
      parameters:
        - name: payload
          in: body
          description: data required for user creation
          schema:
            $ref: "#/definitions/newUserPayload"
      responses:
        201:
          description: ok  successfully created user
          schema:
            type: object
            properties:
              message: 
                type: string
                example: created
              data: 
                type:
                $ref: "#/definitions/user"
        400:
          description: a 400 is sent when a user passes invalid contents in the body payload
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'name must be provided'
        409:
          description: when a user tries to use an already existing email or username
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'email already in use'
  /api/users/{id}:
    put:
      tags: 
        - User
      description: update an existing user's information
        - application/json
      parameters:
        - name: payload
          in: body
          description: data user wishes to modify
          schema:
            $ref: "#/definitions/newUserPayload"
        - in: path
          name: id
          description: the id of the user to be edited
          schema:
            type: string
          required: true
        - in: header
          name: x-auth-token
          description: token is needed for user to be confirmed logged in
          schema:
            type: string            
      responses:
        200:
          description: ok  successfully updated user's information
          schema:
            type: object
            properties:
              message: 
                type: string
                example: ok
              data: 
                type:
                $ref: "#/definitions/user" 
        400:
          description: a 400 is sent when a user passes invalid contents in the body payload 
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'name must be provided'
        401:
          description: a user has to be logged in to access this route
          schema:
            type: object
            properties:
              message: 
                type: string
                example: 'access denied no token provided'
        409:
          description: when a user tries to use an already existing email or username
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'email already in use'
    delete:
      tags:
        - User
      description: Deletes a user
        - application/json
      parameters:
        - name: id
          in: path
          description: the user's id
          schema:
            type: string
        - name: x-auth-token
          in: header
          description: token is required to verify that the user is logged in.
          schema:
            type: string
      responses:
        200:
          description: users details have been successfully updated
          schema:
            type: object
        401:
          description: a user has to be logged in to use o
          schema:
            $ref: "#/definitions/unauthorized"
  /api/users/me:
    get:
      tags: 
        - User
      description: returns the details of the user making the request
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
      responses:
        200:
          description: ok  successful
          schema:
            type: object
            properties:
              message: 
                type: string
                example: ok
              data: 
                type: object
                properties:
                  _id:
                    type:
                  name:
                    type: object
                    properties:
                      first:
                        type: string
                        example: Grace
                      last:
                        type: string
                        example: frank
                    userName:
                      type: string
                      example: graceyfrank
                    email:
                      type: string
                      example: frankgracey@mail.com
                    role:    
                      type: string
        401:
          description: only a logged in Admin user can access this route. so if a user is not logged in a status code of 401 is sent
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied no token provided'
  /api/users/{id}/documents:
    get:
      tags: 
        - User
      description: returns All documents created by a user
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
        - in: path
          description: the user id of author
          name: id
          schema: 
            type: string
        - in: query
          description: page number
          name: page
          schema: 
            type: string
        - in: query
          description: document to display per page
          name: limit
          schema: 
            type: string
      responses:
        200:
          description: ok  successful
          schema:
            type: object
            properties:
              message: 
                type: string
                example: ok
              data: 
                type: array
                items:
                  type: object
                  properties:
                    title: 
                      type: string
                      example: sweet love
                    _id:
                      type: string
                      example: 5ce9ae7640f0fc06c69735af
                    ownerId: 
                      type: string
                      example: 3bc9ae7640f0fc06c69735bc
                    timestamp:
                      type: string
                      example: 1558818152645
                    content:
                      type: string
                    access: 
                      type: string
                      example: role
                    createdAt: 
                      type: string
                      example: 2019-05-25T21:07:02.949Z
                    updatedAt: 
                      type: string
                      example: 2019-05-25T21:09:20.499Z


definitions:
  user:
    type: object
    properties:
      _id:
        type: string
      name:
        type: object
        properties:
          firstName:
            type: string
            minLength: 3
            maxLength: 255
          lastName:
            type: string
            minLength: 3
            maxLength: 255
        required:
          - firstName
          - lastName
      username:
        type: string
      email:
        type: string
        format: email
      role:
        type: string

  newUserPayload:
    type: object
    properties:
      name:
        type: object
        properties:
          first:
            type: string
            minLength: 3
            maxLength: 255
            example: John
          last:
            type: string
            minLength: 3
            maxLength: 255
            example: Doe
        required:
          - first
          - last
      username:
        type: string
        example: johndoe
      email:
        type: string
        format: email
        example: johnd@example.com
      password:
        type: string
        writeOnly: true
        example: "1234567890"
    required:
      - username
      - email
      - name
      - password



  unauthorized:
    type: object
    properties:
      error:
        type: string
        example: access denied not token provided

  bad-request:
    type: object
    properties:
      error:
        type: string
        example: name must be at least 5 characters long
