
path:
  /api/documents/:
    get:
      tags: 
        - Documents
      description: returns All documents
      produces:
        - application/json
      parameters:
        - in: query
          description: page number
          name: page
          schema: 
            type: string
        - in: query
          description: document to display per page
          name: limit
          schema: 
            type: string
        - in: header
          name: x-auth-token
          schema: 
            type: string
      responses:
        200:
          description: ok  successful
          schema:
            type: object
            properties:
              message: 
                type: string
                example: ok
              data: 
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type:
                    name:
                      type: object
                      properties:
                        first:
                          type: string
                          example: Grace
                        last:
                          type: string
                          example: frank
                    userName:
                      type: string
                      example: graceyfrank
                    email:
                      type: string
                      example: frankgracey@mail.com
                    password:
                      type: string
                    role:    
                      type: string
        400:
          description: invalid query string passed 
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'invalid query'
        401:
          description: when an invalid token is provieded
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'invalid token'
    post:
      tags: 
        - Documents
      description: creates a new document
        - application/json
      parameters:
        - description: data required for user creation
          name: payload
          in: body
          schema:
            $ref: "#/definitions/new-doc"
        - in: header
          name: x-auth-token
          schema: 
            type: string
        
      responses:
        201:
          description: ok  successfully created document
          schema:
            type: object
            properties:
              message: 
                type: string
                example: created
              data: 
                type:
                $ref: "#/definitions/document"
        400:
          description: a 400 is sent when a user passes invalid contents in the body payload
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'tittle must be provided'
        401:
          description: a user has to be logged in before he can create a document
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied no token provided'
        409:
          description: when a user tries to use a document title that already exists
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'document title already in use'
  /api/documents/{id}:
    get:
      tags: 
        - Documents
      description: gets a single document with the passed id
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
        - in: path
          name: id
          schema: 
            type: string
      responses:
        200:
          description: ok 
          schema:
            type: object
            properties:
              message: 
                type: string
                example: created
              data: 
                type:
                $ref: "#/definitions/document"
        400:
          description: when invalid id is passed
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'invalid id'
        403:
          description: a user can only access documents he is authorized to access
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'unauthorized access denied'
    put:
      tags: 
        - Documents
      description: updates a single document
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
        - in: path
          name: id
          schema: 
            type: string
        - description: data required for user creation
          name: payload
          in: body
          schema:
            $ref: "#/definitions/new-doc"
      responses:
        200:
          description: ok 
          schema:
            type: object
            properties:
              message: 
                type: string
                example: created
              data: 
                type:
                $ref: "#/definitions/document"
        400:
          description: when invalid id is passed
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'invalid id'
        401:
          description: a user has to be logged in to access this route
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied'
        403:
          description: a user can only update documents authored by him
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'unauthorized access denied'
    delete:
      tags: 
        - Documents
      description: deletes a single document
      produces:
        - application/json
      parameters:
        - in: header
          name: x-auth-token
          schema: 
            type: string
        - in: path
          name: id
          schema: 
            type: string
      responses:
        200:
          description: ok 
          schema:
            type: object
            properties:
              message: 
                type: string
                example: created
              data: 
                type:
                $ref: "#/definitions/document"
        400:
          description: when invalid id is passed
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'invalid id'
        401:
          description: a user has to be logged in to access this route
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'access denied'
        403:
          description: a user can only delete documents authored by him
          schema:
            type: object
            properties:
              error: 
                type: string
                example: 'unauthorized access denied'

definitions:
  new-doc:
    type: object
    properties:
      title: 
        type: string
      content:
        type: string
      access: 
        type: string
        enum: ['private', 'public', 'role']
    required:
    - title

  document:
    type: object
    properties:
      title: 
        type: string
        example: sweet love
      _id:
        type: string
        example: 5ce9ae7640f0fc06c69735af
      ownerId: 
        type: string
        example: 3bc9ae7640f0fc06c69735bc
      timestamp:
        type: string
        example: 1558818152645
      content:
        type: string
      access: 
        type: string
        example: role
      createdAt: 
        type: string
        example: 2019-05-25T21:07:02.949Z
      updatedAt: 
        type: string
        example: 2019-05-25T21:09:20.499Z
        


